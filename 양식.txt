1-1
{
  "code": "code",
  "content1":"HTML은 브라우저에서 보여지는 데이터들의 뼈대입니다.<br><br> &lt;!DOCTYPE html&gt; 태그는 웹브라우저에게 HTML5로 작성된 문서라는 것을 알리고,<br> &lt;html&gt;태그는 html 코드의 시작과 끝을 알려줍니다.<br> &lt;head&gt;태그는 HTML 문서의 정보를 설정하고,<br> &lt;title&gt;태그는 브라우저의 제목 표시줄이나 페이지 탭에 보여지는 문서의 제목을 설정합니다.<br> &lt;body&gt;태그는 HTML 문서의 구조를 설정하며 웹브라우저에 출력되어 사용자에게 보여지는 부분입니다.<br><br> &lt;body&gt;태그 안에 코드를 작성하기 앞서 HTML의 기본 태그들을 알아보도록 하겠습니다!<br><br>",
  "content2":"&lt;h1&gt;~&lt;h6&gt;태그는 제목을 나타내는 태그입니다. 숫자가 낮을수록 높은 단계(중요한)의 제목입니다.<br> &lt;p&gt;태그는 하나의 문단을 나타냅니다.<br> &lt;br&gt;태그는 줄바꿈을 설정합니다.<br>&lt;hr&gt;태그는 문단의 분리(주제에 의한)를 위해 설정합니다.<br> &lt;a href=\"\"&gt;태그는 다른 페이지, 같은 페이지 위치(#, 해시 태그), 파일, 이메일 주소, 전화번호 등 다른 URL로 연결할 수 있는 하이퍼링크를 설정합니다.<br> &lt;ul&gt;태그는 정렬되지 않은 목록을 설정하고<br> &lt;ol&gt;태그는 정렬된 목록을 설정합니다.<br> &lt;li&gt;태그는 &lt;ul&gt;과 &lt;ol&gt;태그의 자식태그로 목록의 항목을 나타냅니다.<br> &lt;button&gt;태그는 클릭 가능한 버튼을 나타냅니다.<br><br>",
  "content3":"마지막으로 공간분할 태그에 대해서 알아보겠습니다.<br> 공간 분할 태그는 본질적으로 아무것도 나타내지 않는 콘텐츠 영역을 설정하고 CSS를 이용하여 꾸미는 목적으로 사용합니다. 대표적으로 &lt;div&gt;태그와 &lt;span&gt;태그가 존재합니다.<br><br> 직접 코드를 작성해보며 HTML 태그를 익혀봅시다!<br>",
  "stage":1,
  "imgUrl":"./code_img/1-1.png"
}


1-2
{
  "code": "code",
   "content1":"HTML 태그를 이용하여 달력을 만들기 전, 표 콘텐츠를 작성하기 위한 &lt;table&gt; 태그를 학습해봅시다!<br><br>&lt;table&gt;<br> &nbsp; &lt;tr&gt;<br> &nbsp; &nbsp; &lt;th&gt;First name&lt;/th&gt;<br> &nbsp; &nbsp;   &lt;th&gt;Last name&lt;/th&gt;<br> &nbsp; &lt;/tr&gt;<br> &nbsp; &lt;tr&gt;<br> &nbsp; &nbsp; &lt;td&gt;John&lt;/td&gt;<br> &nbsp; &nbsp; &lt;td&gt;Doe&lt;/td&gt;<br> &nbsp; &lt;/tr&gt;<br> &nbsp; &lt;tr&gt;<br> &nbsp; &nbsp;  &lt;td&gt;Jane&lt;/td&gt;<br> &nbsp; &nbsp; &lt;td&gt;Doe&lt;/td&gt;<br> &nbsp;&lt;/tr&gt;<br> &lt;/table&gt;<br>",
  "content2":"앞에 예제에서,<br> &lt;table&gt; 태그는 행과 열로 이루어진 표를 정의합니다. <br> &lt;th&gt; 태그는 테이블의 셀 그룹의 헤더로 셀을 정의하며 '머리글 칸'을 지정합니다.<br> &lt;tr&gt; 태그는 테이블의 행을 정의하며 '일반 칸'을 지정합니다.<br> &lt;td&gt; 태그는 데이터를 포함하는 표의 셀을 정의합니다.<br>",
  "content3":"*colspan과 rowspan속성을 사용하여 열과 행을 확장할 수 있습니다.<br><br> &lt;thead&gt;,&lt;tbody&gt;,&lt;tfoot&gt; 태그는 표의 머리글, 본문, 바닥글을 지정하며, 기본적으로 테이블의 레이아웃에 영향을 주지 않습니다.<br><br> 학습한 내용을 토대로 직접 코드를 작성해 보며 달력을 만들기 위한 HTML 뼈대를 세워봅시다!<br>",
  "stage":2,
  "imgUrl":"./code_img/1-2.png"
}


1-3
{
  "code": "code",
   "content1":"회원가입 창을 만들기 위한 여러가지 HTML 태그를 학습해봅시다!<br><br> &lt;form&gt;태그는 웹 서버에 정보를 제출하기 위한 양식 범위를 정의합니다.<br> &lt;input&gt;태그는 사용자에게 입력 받을 데이터 양식입니다.<br> &lt;textarea&gt;태그는 여러 줄의 일반 텍스트 양식입니다.<br> &lt;select&gt;태그는 옵션을 선택하는 메뉴입니다.<br> &lt;option&gt;태그는 선택 메뉴(&lt;select&gt;)에서 사용될 옵션입니다.<br><br> 학습한 내용을 토대로 직접 코드를 작성해 보며 회원가입 창 HTML 뼈대를 세워봅시다!<br>",
  "content2":"",
  "content3":"",
  "stage":3,
  "imgUrl":"./code_img/1-3.png"
}


2-1
{
  "code": "code",
   "content1":"CSS는 HTML 요소들이 각종 미디어에서 어떻게 보이는가를 정의하는데 사용되는 스타일 시트 언어입니다. <br><br> css는 style태그 내부에 작성하거나, link 태그를 통해 외부에서 작성된 css 문서를 불러와 사용합니다.<br><br> css 선택자란는 HTML의 특정한 요소를 선택하는 사인입니다. 이를 통해 특정 요소들을 선택하여 스타일을 적용할 수 있게 됩니다. 대표적인 3가지를 알아보겠습니다.<br><br>",
  "content2":"태그 선택자 - 선택자를 입력하는 부분에 적용하려는 태그의 이름을 입력합니다.<br><br> /*&lt;h1&gt;은 글자색이 빨강이야!*/<br> h1 {<br>&nbsp; color: red;<br>}<br><br>클래스 선택자 - 좀 더 명확하게 원하는 요소를 찾기 위해서 ‘클래스 선택자’를 사용합니다.<br><br> /*class=\"title\"은 글자색이 빨강이고 글자 굵기는 bold야!*/<br> .title {<br>&nbsp; color: red;<br>&nbsp; font-weight: bold;<br>}<br><br>아이디 선택자 - 유일한 하나의 객체를 찾기 위해서 ‘아이디 선택자’를 사용합니다.<br><br> /*id=\"main-text\"는 글자크기가 15px이야!*/<br> #main-text {<br>&nbsp; font-size: 15px;<br>}<br><br>",
  "content3":"css는 속성을 통해 크기, 여백, 색상 같은 눈에 보이는 스타일을 지정합니다.<br><br> 직접 코드를 작성해보며 css 속성을 익혀봅시다!<br><br>",
  "stage":1,
  "imgUrl":"./code_img/2-1.png"
}

2-2
{
  "code": "code",
  "content1":"HTML로 작성한 달력을 꾸며보기 위한 여러가지 CSS 속성을 학습해봅시다!<br><br> 모든 HTML 요소는 박스(box) 모양으로 구성되며, 이것을 박스 모델(box model)이라고 부릅니다. 이 박스 모델을 구성하는 다양한 속성들 중 일부를 학습해보겠습니다.<br><br> div {<br> &nbsp; width: 100px;<br> &nbsp; height: 100px;<br> &nbsp;  margin: 20px;<br> &nbsp;   border: 1px solid red;<br> &nbsp;  padding: 15px;<br> }<br><br> width 속성은 HTML 요소의 너비를 설정합니다.<br> height 속성은 HTML 요소의 높이를 설정합니다.<br> margin 속성은 테두리(border)와 이웃하는 요소 사이의 간격인 마진 영역의 크기를 설정합니다.<br> border 속성은 내용(content)과 패딩(padding) 영역을 둘러싸는 테두리의 스타일을 설정합니다.<br> padding 속성은 내용(content)과 테두리(border) 사이의 간격인 패딩 영역의 크기를 설정합니다.<br>",
  "content2":"다음으로 웹 페이지를 보는 사용자가 마우스로 특정한 행동을 취했을 때 CSS 속성을 지정 할 수 있는 반응 선택자를 학습해봅시다!<br><br> :hover선택자는 사용자가 마우스를 올린 태그를 선택합니다. <br> :active선택자는 사용자가 마우스로 클릭한 태그를 선택합니다.<br><br> /* h1태그에 마우스를 올릴 경우에 color 속성에 red키워드를 적용합니다 */<br> h1:hover {color: red;}<br><br> /* h1태그를 마우스로 클릭할 대 color 속성에 blue키워드를 적용합니다 */<br> h1:active {color:blue;}<br>",
  "content3":"마지막으로 요소의 배경 효과를 정의하는데 사용하는 배경 속성을 학습해봅시다!<br><br> background-color속성은 해당 HTML 요소의 배경색을 설정합니다.<br> background-image속성은 해당 HTML 요소의 배경으로 나타날 배경 이미지를 설정합니다.<br> background-size속성은 배경 이미지의 크기를 설정합니다.<br><br> 학습한 내용을 통해 HTML로 작성한 달력을 CSS로 꾸며봅시다!<br>",
  "stage":2,
  "imgUrl":"./code_img/2-2.png"
}
2-3
{
  "code": "code",
   "content1":"HTML로 작성한 회원가입창을 꾸며보기 위한 여러가지 CSS 속성을 학습해봅시다!<br><br> display 속성은 웹 페이지의 레이아웃을 결정하는 CSS의 중요한 속성 중 하나입니다.<br> 이 속성은 해당 HTML 요소가 웹 브라우저에 언제 어떻게 보이는가를 결정합니다.<br><br> div { display: block;}<br>display 속성값이 block인 요소는 언제나 새로운 라인에서 시작하며, 해당 라인의 모든 너비를 차지합니다.<br><br> div { display: inline;}<br>display 속성값이 inline인 요소는 새로운 라인(line)에서 시작하지 않고, 요소의 너비도 해당 라인 전체가 아닌 해당 HTML 요소의 내용(content)만큼만 차지합니다.<br><br> div { display: inline-block;}<br> display 속성값이 inline-block으로 설정된 요소는 해당 요소 자체는 inline 요소처럼 동작하지만 해당 요소 내부에서는 block 요소처럼 동작합니다.<br><br>",
  "content2":"다음으로 position 속성을 학습해보겠습니다!<br><br> position 속성은 HTML 요소가 위치를 결정하는 방식을 설정합니다.<br><br> div { position: static; }<br>position 속성값이 static으로 설정된 요소는 top, right, bottom, left 속성값에 영향을 받지 않습니다. 단순히 웹 페이지의 흐름에 따라 차례대로 요소들을 위치시키는 방식입니다.<br><br> div { position: relative; }<br> position 속성값이 relative로 설정된 요소는 해당 HTML 요소의 기본 위치를 기준으로 위치를 설정합니다.<br><br> div { position: fixed; }<br>position 속성값이 fixed로 설정된 요소는 뷰포트(viewport)를 기준으로 위치를 설정합니다. 즉, 웹 페이지가 스크롤 되어도 고정 위치로 지정된 요소는 항상 같은 곳에 위치하게 됩니다.<br><br> div { position: absolute; }<br> position 속성값이 absolute로 설정된 요소는 뷰포트를 기준으로 위치를 결정하는 것과 비슷하게 동작합니다. 단지 뷰포트를 기준으로 하는 것이 아닌 위치가 설정된 조상 요소를 기준으로 위치를 설정하게 됩니다.<br><br>",
  "content3":"마지막으로 플렉서블 박스(flexible box) 레이아웃을 학습해봅시다!<br><br> 플렉서블 박스(flexible box)는 플렉스 박스(flex box)라고도 불리며, CSS3에서 처음 소개된 레이아웃 모델입니다.<br><br> 이 레이아웃은 서로 다른 크기의 화면과 기기에서도 HTML 요소들이 자동으로 재정렬되어, 웹 페이지의 레이아웃을 언제나 똑같이 유지할 수 있게 해줍니다. 또한 수평 레이아웃을 쉽게 구성할 수 있도록 합니다. 다음의 예제를 살펴봅시다.<br><br> div {<br>&nbsp; display: flex;<br>&nbsp; flex-direction: row-reverse;<br> &nbsp; justify-content: flex-end;<br> &nbsp; align-items: flex-end;<br> &nbsp; flex-wrap: wrap;<br>&nbsp;  align-content: space-between;<br> }<br><br>flex-direction 속성은 플렉스 컨테이너 안에서 플렉스 요소가 배치될 방향을 설정합니다.<br> justify-content 속성은 플렉스 요소의 수평 방향 정렬 방식을 설정합니다.<br> align-items 속성은 플렉스 요소의 수직 방향 정렬 방식을 설정합니다. 이 속성은 한 줄만을 가지는 플렉스 박스에서는 효과가 없으며, 두 줄 이상을 가지는 플렉스 박스에서만 효과가 있습니다.<br> flex-wrap 속성은 플렉스 라인에 더 이상의 여유 공간이 없을 때, 플렉스 요소의 위치를 다음 줄로 넘길지를 설정합니다.<br> align-content 속성은 flex-wrap 속성의 동작을 변경할 수 있습니다. 이 속성은 align-items 속성과 비슷한 동작을 하지만, 플렉스 요소를 정렬하는 대신에 플렉스 라인을 정렬합니다.<br><br> 학습한 내용을 토대로 HTML로 작성한 달력을 CSS로 꾸며봅시다!<br>",
  "stage":3,
  "imgUrl":"./code_img/2-3.png"
}

3-1
{
  "code": "code",
   "content1":"Javascript는 HTML과 CSS로 만들어진 웹페이지를 동적으로 변경해주는 언어입니다.<br><br> Javascript는 script태그 내부에 작성하거나, link 태그를 통해 외부에서 작성된 javascript 문서를 불러와 사용합니다.<br><br> 자바스크립트는 선택자를 이용하여 특정 요소를 찾습니다. 다음 예제를 살펴봅시다!<br><br>",
  "content2":"-HTML<br>&lt;div id='div_1'&gt;<br>&nbsp; Div1입니다.<br>&lt;/div&gt;<br>&lt;div id='div_2'&gt;<br>&nbsp; Div2입니다.<br>&lt;/div&gt;<br>&lt;button onclick='getDiv1()'&gt;id로 찾기&lt;/button&gt;<br><br> -JS<br>function getDiv1() {<br>&nbsp; const div1 = document.getElementById('div_1');<br> &nbsp; alert(div1.innerText);<br> &nbsp; console.log(div1.innerText);<br> } <br><br>여기서 document.getElementById() 메서드는 주어진 문자열과 일치하는 id 속성을 가진 요소를 찾고, 이를 나타내는 Element 객체를 반환합니다. <br> alert() 메서드는 메시지를 지정할 수 있는 경고 대화 상자를 띄웁니다.<br> console.log() 메서드는 Web Console에 메시지를 출력합니다.<br><br>",
  "content3":"다음으로 자바스크립트의 기본 사칙 연산을 학습해보겠습니다.<br><br> //더하기 기호는 +<br>console.log(22 + 10);<br><br>//빼기 기호는 -<br>console.log(22 - 10);<br><br>//곱하기 기호는 *<br>console.log(22 * 10);<br><br>//나눗셈 기호는 /<br>console.log( 22 / 10);<br><br> //나머지는 어떻게 구할까요?<br>console.log(8 % 3); //2<br>console.log(22 % 3); //1<br><br> 직접 코드를 작성해보며 Javascript를 익혀봅시다!<br>",
  "stage":1,
  "imgUrl":"./code_img/3-1.png"
}
3-2
{
  "code": "code",
   "content1":"javascript의 조건문과 반복문을 학습해봅시다!<br><br> 조건문은 특정 조건 만족 시 어떤 작업을 수행하고 싶을 때 사용합니다. <br> 대표적으로 if, else if, else문이 있습니다. <br><br> if ( condition1 ) {<br> &nbsp;  statement1<br> } else if ( condition2 ) {<br> &nbsp; statement2<br> } else {<br> &nbsp; statement3<br> }<br> condition1을 만족하면 statement1을 실행하고, condition2을 만족하면 statement2을 실행하고, 둘 다 만족하지 않으면 statement3을 실행합니다.<br>",
  "content2":"반복문은 특정 작업을 반복적으로 할 때 사용할 수 있는 구문입니다.<br> for 문은 가장 기본적인 반복문입니다. 특정 값에 변화를 주어가면서 우리가 정한 조건이 만족된다면 계속 반복합니다.<br><br> for (let i = 0; i &lt; 10; i++) {<br> &nbsp;console.log(i);<br> }<br><br> 위 코드는 0부터 9까지의 숫자를 Web Console에 출력합니다.<br> ",
  "content3":"while문은 특정 조건이 참이라면 계속해서 반복하는 반복문입니다.<br><br> 우리가 앞서 작성했던 0 부터 9 까지 콘솔에 출력을하는 반복문을 while 문으로 구현해보겠습니다.<br><br> let i = 0;<br> while (i &lt; 10) {<br> &nbsp;  console.log(i);<br> &nbsp; i++;<br> }<br><br> 학습한 내용을 토대로 HTML과 CSS로 작성한 달력에 자바스크립트 코드를 추가해봅시다!<br>",
  "stage":2,
  "imgUrl":"./code_img/3-2.png"
}
3-3
{
  "code": "code",
   "content1":"자바스크립트 언어를 간편하게 사용할 수 있도록 단순화시킨 제이쿼리를 학습해봅시다!<br><br> 제이쿼리(jQuery)는 오픈 소스 기반의 자바스크립트 라이브러리입니다.<br> 제이쿼리를 이용하면 문서 객체 모델(DOM)과 이벤트에 관한 처리를 손쉽게 구현할 수 있고, 짧고 단순한 코드로도 웹 페이지에 다양한 효과나 연출을 적용할 수 있습니다.<br><br> &lt;script src=\"https://code.jquery.com/jquery-latest.min.js\"&gt;&lt;/script&gt;<br> 위의 코드를 &lt;head&gt;태그 내부에 작성하여 외부의 CDN 서버에서 jQuery 배포판을 불러와봅시다. <br><br> 이제 제이쿼리 라이브러리를 사용할 수 있게 되었습니다.<br> 다음으로 jquery 문법을 학습해봅시다!<br>",
  "content2":"$(선택자).동작함수();<br>달러($) 기호는 제이쿼리를 의미하고, 제이쿼리에 접근할 수 있게 해주는 식별자입니다.<br> 선택자를 이용하여 원하는 HTML 요소를 선택하고, 동작 함수를 정의하여 선택된 요소에 원하는 동작을 설정합니다.<br>다음의 예제를 살펴봅시다.<br><br> $('.hello').css('color', 'red')<br><br> 위 코드는 클래스명이 hello인 요소를 선택하여 css의 color 속성 값으로 red를 부여합니다.<br> 이처럼 jQuery는 적은 양의 코드로 빠르고 쉬운 개발을 가능하게 합니다.<br><br> 다음의 코드는 앞서 살펴봤던 예제를 자바스크립트 코드로 변경한 것입니다.<br><br> var obj = document.querySelectorAll('.hello');<br> obj.forEach(function(element){<br> &nbsp; element.style.color='red';<br> });<br><br>제이쿼리 코드에 비해 훨씬 복잡해졌다는 것을 알 수 있습니다.<br><br>",
  "content3":"제이쿼리가 자바스크립트에 비해 항상 우월하다고 말할 수 있을까요?<br> 그렇지 않습니다!<br><br>jQuery는 어디까지나 자바스크립트를 이용해서 만든 것이기 때문에, 개발 속도가 아닌 처리 속도 부분에서는 성능이 매우 떨어집니다. 몇단계를 거쳐서 실행하기 때문입니다.<br><br> 따라서 문서 구조가 복잡하고 길수록, 특히 여러항목의 값을 동시에 처리할수록 Javascript가 JQuery에 비해 훨씬 빠른 속도를 자랑합니다.<br><br> 그렇기 때문에 상황에 맞춰 Javascript와 JQuery를 적절히 사용하는 것이 좋습니다.<br><br> 이제 본격적으로 코드를 작성해보며 JQuery를 익혀봅시다!<br><br>",
  "stage":3,
  "imgUrl":"./code_img/3-3.png"
}

